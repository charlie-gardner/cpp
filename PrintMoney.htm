<!doctype html><html lang="en">
<head>
<meta name ="viewport" content =
"width=device-width ,height=device-height ,
,initial-scale=1,maximum-scale=1, user-scalable=no"/>
<title>Charlieville</title>
<link rel="stylesheet" href= "../css/charlieville.css"/>
</head>

<body>
<section style="background:navy;"> 

<section class="box1x1">
<a href ="PrintMoneyConsole.htm"><img src=
"http://charlieville.com/img/back.png">
</a></section>

<section class="box11x1"  
style=' background-image: url("../img/logo_1_0.png");'>
</section>

<section class="box12x6 textcolor">
<textarea class="boxpadding4 textcolor" spellcheck="false"
style="overflow-y: scroll;font-size:2vw;">

// qik.cpp 2024-07-21 Charlie Gardner
#include <iostream>
#include <sstream>
#include <iomanip>

static std::wstring fmtMoney
(double value,int width = 0,int decimals=2,const wchar_t fill=L' ') {
std::wstringstream ss;
ss.imbue(std::locale("en_US.UTF-8"));//commas
double result = value; if (value < 0)result = -value;
ss << std::fixed << std::setprecision(decimals);
if(value<0)ss << L"-$" << result;
else ss << L"$" << result;
if(0==width) return ss.str();//return 0 decimals no fill needed
std::wstringstream ss2;ss2.fill(fill);
ss2 << std::setw(width)<< ss.str();
return  ss2.str();}

static std::wstring _$(double value, int width = 0, int decimals = 2) {
return fmtMoney(value, width, decimals);}

int wmain() {
const wchar_t* br=L"\r\n";
std::wcout<<L"Show how fmtMoney prints Money with commas and the $ sign"<<br;
std::wcout << L"I tried to use std::print_money but found it totally useless" << br;
std::wcout << L"sometimes it would print the dollar sign most times it didn't" << br;
std::wcout << L"it forces you to print 2 decimals even if you don't want cents" << br;
std::wcout<<L"the simplest form is fmtMoney(9999) which gives 2 decimals"<<br;
std::wcout << L"then fmtMoney(9999,width) which spaces properly" << br;
std::wcout << L"then fmtMoney(9999,width,0) will space and give only dollars" << br;
std::wcout << L"then fmtMoney(9999,width,decimals,char) will add a fill char" << br;
std::wcout << L"note the default rounding has to be greater than .5" <<br;
std::wcout << L"also shortened it to _$ just to be a smart alec" << br<<br;
double neg51 = -99998.501;
double neg50 = -99998.50;
double pos50 = -neg50;
double pos51 = -neg51;
int width=14;
std::wcout << std::fixed << std::setprecision(3);

std::wcout << L"[" << _$(neg51) << L"]" << br;
std::wcout << L"[" << _$(neg50) << L"]" << br;
std::wcout << L"[" << _$(0) << L"]" << br;
std::wcout << L"[" << _$(pos50) << L"]" << br;
std::wcout << L"[" << _$(pos51) << L"]" << br;
std::wcout << br;
std::wcout << L"[" << fmtMoney(neg51, width) << L"] :" << std::setw(10) <<neg51 << br;
std::wcout<<L"["<< fmtMoney(neg50,width) << L"] :" << std::setw(10) <<neg50 << br;
std::wcout << L"[" << fmtMoney(0, width) << L"] :" << std::setw(6) << 0 << br;
std::wcout << L"[" << fmtMoney(pos50, width) << L"] :" << std::setw(10) << pos50 << br;
std::wcout << L"[" << fmtMoney(pos51, width) << L"] :" << std::setw(10) << pos51 << br;
std::wcout << br;
wprintf(L"[%s] :%10.3f\r\n", fmtMoney(neg51, width, 0,L'.').c_str(), neg51);
wprintf(L"[%s] :%10.3f\r\n", fmtMoney(neg50, width, 0, L'.').c_str(), neg50);
wprintf(L"[%s] :%10.3f\r\n", fmtMoney(0, width, 0, L'.').c_str(), 0.0);
wprintf(L"[%s] :%10.3f\r\n", fmtMoney(pos50, width, 0, L'.').c_str(), pos50);
wprintf(L"[%s] :%10.3f\r\n", fmtMoney(pos51, width, 0, L'.').c_str(), pos51);
return 0;}
</textarea></section>
</section>
<hr style='background:navy;height:2px'/> 
</body></html>



